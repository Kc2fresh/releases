'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _EmptyTree = require('./EmptyTree.js');

var _EmptyTree2 = _interopRequireDefault(_EmptyTree);

var _Icon = require('./Icon.js');

var _Icon2 = _interopRequireDefault(_Icon);

var _Node = require('./node/Node.js');

var _Node2 = _interopRequireDefault(_Node);

var _ParseError = require('./ParseError.js');

var _ParseError2 = _interopRequireDefault(_ParseError);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _helpers = require('./helpers');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MainStage = function (_React$Component) {
  _inherits(MainStage, _React$Component);

  function MainStage() {
    _classCallCheck(this, MainStage);

    var _this = _possibleConstructorReturn(this, (MainStage.__proto__ || Object.getPrototypeOf(MainStage)).call(this));

    _this.state = {
      rendered: false
    };
    return _this;
  }

  _createClass(MainStage, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.state = {
        rendered: true
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _classNames;

      var rendered = this.state.rendered;
      var _props = this.props,
          readOnly = _props.readOnly,
          styles = _props.styles,
          positions = _props.positions,
          linkLabels = _props.linkLabels,
          data = _props.data,
          layout = _props.layout,
          text = _props.text,
          selectedNodeId = _props.selectedNodeId,
          hoverNodeId = _props.hoverNodeId,
          focusNode = _props.focusNode,
          hoverNode = _props.hoverNode,
          fetchAltParse = _props.fetchAltParse,
          togglePane = _props.togglePane,
          loading = _props.loading,
          firstLoad = _props.firstLoad,
          emptyQuery = _props.emptyQuery,
          errorState = _props.errorState;


      var mainsStageContent = null;

      if (emptyQuery) {
        mainsStageContent = _react2.default.createElement(_EmptyTree2.default, null);
      } else {
        if (data && !errorState) {
          // TODO: remove readOnly, execute componentDidUpdate automatically when readOnly is true
          mainsStageContent = _react2.default.createElement(
            'div',
            { className: 'main-stage__tree-container ' + (rendered || readOnly ? "main-stage--rendered" : "") },
            _react2.default.createElement('div', { className: 'main-stage__defocus-trigger', onDoubleClick: function onDoubleClick() {
                focusNode("defocus");
              } }),
            _react2.default.createElement(_Node2.default, {
              readOnly: readOnly,
              selectedNodeId: selectedNodeId,
              focusNode: focusNode,
              hoverNodeId: hoverNodeId,
              hoverNode: hoverNode,
              fetchAltParse: fetchAltParse,
              togglePane: togglePane,
              styles: styles,
              positions: positions,
              linkLabels: linkLabels,
              loading: loading,
              data: data,
              isSingleSegment: (0, _helpers.isSingleSegment)(data.nodeType),
              layout: layout,
              depth: 0,
              directionalChildIndex: 0,
              text: text })
          );
        } else {
          mainsStageContent = _react2.default.createElement(_ParseError2.default, null);
        }
      }

      // mainStageConditionalClasses builds dynamic class lists for #main-stage:
      var mainStageConditionalClasses = (0, _bind2.default)((_classNames = {}, _defineProperty(_classNames, '' + layout, true), _defineProperty(_classNames, "main-stage--loading", loading), _defineProperty(_classNames, "main-stage--fade-delay", !firstLoad && !emptyQuery), _classNames));

      return _react2.default.createElement(
        'div',
        { id: 'main-stage', className: mainStageConditionalClasses },
        loading ? _react2.default.createElement(
          'div',
          { className: 'main-stage__loading-mask' },
          _react2.default.createElement(
            'div',
            { className: 'main-stage__loading-mask__spinbox' },
            _react2.default.createElement(_Icon2.default, { symbol: 'logo-euclid', wrapperClass: 'loader' })
          )
        ) : null,
        _react2.default.createElement('div', { className: 'main-stage__defocus-trigger', onDoubleClick: function onDoubleClick() {
            focusNode("defocus");
          } }),
        mainsStageContent
      );
    }
  }]);

  return MainStage;
}(_react2.default.Component);

MainStage.propTypes = {
  readOnly: _react.PropTypes.bool,
  styles: _react.PropTypes.object.isRequired,
  positions: _react.PropTypes.object.isRequired,
  linkLabels: _react.PropTypes.object.isRequired,
  data: _react.PropTypes.shape({
    id: _react.PropTypes.string,
    kind: _react.PropTypes.string,
    word: _react.PropTypes.string,
    attributes: _react.PropTypes.arrayOf(_react.PropTypes.string.isRequired),
    children: _react.PropTypes.arrayOf(_react.PropTypes.object.isRequired),
    link: _react.PropTypes.string
  }),
  layout: _react.PropTypes.string,
  text: _react.PropTypes.string,
  selectedNodeId: _react.PropTypes.string,
  hoverNodeId: _react.PropTypes.string,
  focusNode: _react.PropTypes.func,
  hoverNode: _react.PropTypes.func,
  fetchAltParse: _react.PropTypes.func,
  togglePane: _react.PropTypes.func,
  loading: _react.PropTypes.bool,
  firstLoad: _react.PropTypes.bool,
  emptyQuery: _react.PropTypes.bool,
  errorState: _react.PropTypes.bool
};

exports.default = MainStage;