'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _PassageSpan = require('./PassageSpan.js');

var _PassageSpan2 = _interopRequireDefault(_PassageSpan);

var _Icon = require('./Icon.js');

var _Icon2 = _interopRequireDefault(_Icon);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Passage = function (_React$Component) {
  _inherits(Passage, _React$Component);

  function Passage() {
    _classCallCheck(this, Passage);

    var _this = _possibleConstructorReturn(this, (Passage.__proto__ || Object.getPrototypeOf(Passage)).call(this));

    _this.state = {
      passageActive: false,
      focused: false,
      autoFocus: null
    };
    _this.handleFocus = _this.handleFocus.bind(_this);
    _this.handleBlur = _this.handleBlur.bind(_this);
    _this.handleMouseOver = _this.handleMouseOver.bind(_this);
    _this.handleMouseOut = _this.handleMouseOut.bind(_this);
    _this.handleSpaceBar = _this.handleSpaceBar.bind(_this);
    _this.handleEsc = _this.handleEsc.bind(_this);
    return _this;
  }

  _createClass(Passage, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('keyup', this.handleSpaceBar);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.handleEmpty();
    }
  }, {
    key: 'handleEmpty',
    value: function handleEmpty() {
      if (this.props.emptyQuery === true) {
        switch (this.state.autoFocus) {
          case null:
            this.setState({
              autoFocus: true
            });
            break;
          case true:
            this.handleFocus();
            this.setState({
              autoFocus: false
            });
            break;
        }
      }
    }
  }, {
    key: 'handleEsc',
    value: function handleEsc(e) {
      if (e.keyCode === 27) {
        this.handleBlur();
      }
    }
  }, {
    key: 'handleSpaceBar',
    value: function handleSpaceBar(e) {
      var _props = this.props,
          readOnly = _props.readOnly,
          loading = _props.loading;


      if (!loading && !readOnly) {
        if (this.state.focused === false && e.keyCode === 32) {
          e.preventDefault();
          this.handleFocus();
        }
      }

      if (this.state.focused && e.key === 'Enter' && !readOnly) {
        this.handleBlur();
      }
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus() {
      this.setState({
        focused: true
      });
      _reactDom2.default.findDOMNode(this.refs.passageInput).focus();
      this.props.focusNode("defocus");
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur() {
      if (this.props.emptyQuery === true) {
        this.handleFocus();
      } else {
        this.setState({
          focused: false
        });
        _reactDom2.default.findDOMNode(this.refs.passageInput).blur();
      }
    }
  }, {
    key: 'handleMouseOver',
    value: function handleMouseOver() {
      this.setState({
        passageActive: true
      });
    }
  }, {
    key: 'handleMouseOut',
    value: function handleMouseOut() {
      this.setState({
        passageActive: false
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('keyup', this.handleSpaceBar);
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          focused = _state.focused,
          passageActive = _state.passageActive;
      var _props2 = this.props,
          readOnly = _props2.readOnly,
          text = _props2.text,
          inputText = _props2.inputText,
          onKeyPress = _props2.onKeyPress,
          onChange = _props2.onChange,
          loading = _props2.loading,
          data = _props2.data,
          styles = _props2.styles,
          selectedNodeId = _props2.selectedNodeId,
          hoverNodeId = _props2.hoverNodeId,
          hoverNode = _props2.hoverNode,
          focusNode = _props2.focusNode,
          errorState = _props2.errorState;


      var passageConditionalClasses = (0, _bind2.default)({
        "passage--editing": focused,
        "passage--active": passageActive,
        "passage--loading": loading
      });

      return _react2.default.createElement(
        'div',
        { id: 'passage', className: passageConditionalClasses },
        _react2.default.createElement('div', { className: 'passage__focus-trigger',
          onDoubleClick: !readOnly ? this.handleFocus : function () {} }),
        !readOnly ? _react2.default.createElement('textarea', {
          ref: 'passageInput',
          rows: '1',
          onBlur: this.handleBlur,
          onKeyPress: onKeyPress,
          onKeyUp: this.handleEsc,
          readOnly: readOnly,
          onChange: onChange,
          disabled: loading,
          value: inputText !== null ? inputText : "" }) : null,
        _react2.default.createElement(
          'p',
          { onDoubleClick: !readOnly ? this.handleFocus : function () {} },
          _react2.default.createElement(
            'span',
            { className: 'passage__readonly' },
            loading || errorState ? text : _react2.default.createElement(_PassageSpan2.default, {
              text: text,
              data: data,
              styles: styles,
              selectedNodeId: selectedNodeId,
              hoverNodeId: hoverNodeId,
              hoverNode: hoverNode,
              focusNode: focusNode,
              depth: 0 }),
            !readOnly ? _react2.default.createElement(
              'span',
              { className: 'passage__edit',
                onClick: this.handleFocus,
                onMouseOver: this.handleMouseOver,
                onMouseOut: this.handleMouseOut,
                title: 'Edit query' },
              _react2.default.createElement(_Icon2.default, { symbol: 'edit', wrapperClass: 'passage__edit__trigger' })
            ) : null
          )
        ),
        _react2.default.createElement('div', { className: 'passage__loading-mask' })
      );
    }
  }]);

  return Passage;
}(_react2.default.Component);

Passage.propTypes = {
  readOnly: _react.PropTypes.bool,
  text: _react.PropTypes.string.isRequired,
  inputText: _react.PropTypes.string,
  onKeyPress: _react.PropTypes.func.isRequired,
  onChange: _react.PropTypes.func.isRequired,
  focusNode: _react.PropTypes.func,
  loading: _react.PropTypes.bool,
  emptyQuery: _react.PropTypes.bool,
  errorState: _react.PropTypes.bool,
  data: _react.PropTypes.object,
  styles: _react.PropTypes.object,
  selectedNodeId: _react.PropTypes.string,
  hoverNodeId: _react.PropTypes.string,
  hoverNode: _react.PropTypes.func
};

exports.default = Passage;