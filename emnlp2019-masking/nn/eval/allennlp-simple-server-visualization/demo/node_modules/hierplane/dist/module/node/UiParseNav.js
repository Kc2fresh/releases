'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Icon = require('../Icon.js');

var _Icon2 = _interopRequireDefault(_Icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var UiParseNav = function (_React$Component) {
  _inherits(UiParseNav, _React$Component);

  function UiParseNav() {
    _classCallCheck(this, UiParseNav);

    return _possibleConstructorReturn(this, (UiParseNav.__proto__ || Object.getPrototypeOf(UiParseNav)).apply(this, arguments));
  }

  _createClass(UiParseNav, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          readOnly = _props.readOnly,
          onPnMouseOver = _props.onPnMouseOver,
          onPnMouseOut = _props.onPnMouseOut,
          onPnMouseUp = _props.onPnMouseUp,
          data = _props.data;


      var altParseInfoExists = data.hasOwnProperty("alternateParseInfo") && data.alternateParseInfo !== undefined;

      var arrowIcons = function arrowIcons(direction) {
        return _react2.default.createElement(
          'div',
          { className: 'node__word__ui__glyph node__word__ui__glyph--' + direction },
          _react2.default.createElement(_Icon2.default, { symbol: 'arrow-' + direction, wrapperClass: 'node__word__ui__glyph__svg' }),
          _react2.default.createElement(_Icon2.default, { symbol: 'arrow-' + direction + '--inverted', wrapperClass: 'node__word__ui__glyph__svg--inverted' })
        );
      };

      var createNavButton = function createNavButton(direction, target) {
        return altParseInfoExists && data.alternateParseInfo.hasOwnProperty(target + 'Parse') && !readOnly ? _react2.default.createElement(
          'div',
          { className: 'parse-nav-trigger-' + direction,
            onMouseOver: onPnMouseOver,
            onMouseOut: onPnMouseOut,
            onMouseUp: function onMouseUp() {
              onPnMouseUp(data, target);
            } },
          arrowIcons(direction)
        ) : _react2.default.createElement(
          'div',
          { className: 'parse-nav-trigger-' + direction + ' node__word__ui--disabled' },
          arrowIcons(direction)
        );
      };

      return _react2.default.createElement(
        'div',
        { className: 'node__word__ui node__word__ui--parse-nav' },
        createNavButton("left", "prev"),
        createNavButton("right", "next")
      );
    }
  }]);

  return UiParseNav;
}(_react2.default.Component);

UiParseNav.propTypes = {
  readOnly: _react.PropTypes.bool,
  data: _react.PropTypes.object,
  onPnMouseOver: _react.PropTypes.func,
  onPnMouseOut: _react.PropTypes.func,
  onPnMouseUp: _react.PropTypes.func
};

exports.default = UiParseNav;